package arm.node;

@:keep class Obstacles extends armory.logicnode.LogicTree {

	public function new() { super(); notifyOnAdd(add); }

	override public function add() {
		var _SetVariable = new armory.logicnode.SetVariableNode(this);
		var _SpawnObject = new armory.logicnode.SpawnObjectNode(this);
		var _OnVolumeTrigger = new armory.logicnode.OnVolumeTriggerNode(this);
		_OnVolumeTrigger.property0 = "Enter";
		_OnVolumeTrigger.addInput(new armory.logicnode.ObjectNode(this, "Player"), 0);
		_OnVolumeTrigger.addInput(new armory.logicnode.ObjectNode(this, "Check"), 0);
		var _Sleep = new armory.logicnode.SleepNode(this);
		_Sleep.addInput(_OnVolumeTrigger, 0);
		_Sleep.addInput(new armory.logicnode.FloatNode(this, 0.009999999776482582), 0);
		var _SetLocation = new armory.logicnode.SetLocationNode(this);
		_SetLocation.addInput(_Sleep, 0);
		_SetLocation.addInput(new armory.logicnode.ObjectNode(this, "Check"), 0);
		var _VectorMath_001 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_001.property0 = "Add";
		var _GetLocation = new armory.logicnode.GetLocationNode(this);
		_GetLocation.addInput(new armory.logicnode.ObjectNode(this, "Check"), 0);
		_GetLocation.addOutputs([_VectorMath_001]);
		_VectorMath_001.addInput(_GetLocation, 0);
		_VectorMath_001.addInput(new armory.logicnode.VectorNode(this, 0.0, 15.0, 0.0), 0);
		_VectorMath_001.addOutputs([_SetLocation]);
		_VectorMath_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SetLocation.addInput(_VectorMath_001, 0);
		_SetLocation.addOutputs([new armory.logicnode.NullNode(this)]);
		_Sleep.addOutputs([_SetLocation]);
		_OnVolumeTrigger.addOutputs([_Sleep, _SpawnObject]);
		_SpawnObject.addInput(_OnVolumeTrigger, 0);
		_SpawnObject.addInput(new armory.logicnode.ObjectNode(this, "Obstacle"), 0);
		var _Transform = new armory.logicnode.TransformNode(this);
		var _Vector = new armory.logicnode.VectorNode(this);
		var _SeparateXYZ = new armory.logicnode.SeparateVectorNode(this);
		var _Vector_001 = new armory.logicnode.VectorNode(this);
		_Vector_001.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector_001.addInput(new armory.logicnode.FloatNode(this, 15.0), 0);
		_Vector_001.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector_001.addOutputs([_SeparateXYZ, _Vector_001]);
		_SeparateXYZ.addInput(_Vector_001, 0);
		_SeparateXYZ.addOutputs([_Vector]);
		var _Math = new armory.logicnode.MathNode(this);
		_Math.property0 = "Add";
		_Math.property1 = "false";
		_Math.addInput(_SeparateXYZ, 1);
		_Math.addInput(new armory.logicnode.FloatNode(this, 15.0), 0);
		_Math.addOutputs([_Vector]);
		_SeparateXYZ.addOutputs([_Math]);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Vector.addInput(_SeparateXYZ, 0);
		_Vector.addInput(_Math, 0);
		var _Random_Float_ = new armory.logicnode.RandomFloatNode(this);
		_Random_Float_.addInput(new armory.logicnode.FloatNode(this, -7.809999942779541), 0);
		_Random_Float_.addInput(new armory.logicnode.FloatNode(this, 6.139999866485596), 0);
		_Random_Float_.addOutputs([_Vector]);
		_Vector.addInput(_Random_Float_, 0);
		_Vector.addOutputs([_Transform, _Vector]);
		_Transform.addInput(_Vector, 0);
		_Transform.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0), 0);
		_Transform.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_Transform.addOutputs([_SpawnObject]);
		_SpawnObject.addInput(_Transform, 0);
		var _ArrayAdd = new armory.logicnode.ArrayAddNode(this);
		_ArrayAdd.addInput(_SpawnObject, 0);
		var _Array_Object_ = new armory.logicnode.ArrayObjectNode(this);
		var _ArrayShift = new armory.logicnode.ArrayShiftNode(this);
		_ArrayShift.addInput(_Array_Object_, 0);
		var _RemoveObject = new armory.logicnode.RemoveObjectNode(this);
		var _IsTrue = new armory.logicnode.IsTrueNode(this);
		var _Sleep_001 = new armory.logicnode.SleepNode(this);
		_Sleep_001.addInput(_ArrayAdd, 0);
		_Sleep_001.addInput(new armory.logicnode.FloatNode(this, 4.0), 0);
		_Sleep_001.addOutputs([_IsTrue]);
		_IsTrue.addInput(_Sleep_001, 0);
		var _GetProperty = new armory.logicnode.GetPropertyNode(this);
		var _GlobalObject = new armory.logicnode.GlobalObjectNode(this);
		_GlobalObject.addOutputs([_GetProperty]);
		_GetProperty.addInput(_GlobalObject, 0);
		_GetProperty.addInput(new armory.logicnode.StringNode(this, "Playable"), 0);
		_GetProperty.addOutputs([_IsTrue]);
		_IsTrue.addInput(_GetProperty, 0);
		_IsTrue.addOutputs([_RemoveObject]);
		_RemoveObject.addInput(_IsTrue, 0);
		_RemoveObject.addInput(_ArrayShift, 0);
		_RemoveObject.addOutputs([new armory.logicnode.NullNode(this)]);
		_ArrayShift.addOutputs([_RemoveObject]);
		_Array_Object_.addOutputs([_ArrayAdd, _ArrayShift]);
		_Array_Object_.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_ArrayAdd.addInput(_Array_Object_, 0);
		_ArrayAdd.addInput(_SpawnObject, 1);
		_ArrayAdd.addOutputs([_Sleep_001]);
		_SpawnObject.addOutputs([_ArrayAdd, _SetVariable]);
		_SpawnObject.addOutputs([_ArrayAdd]);
		_SetVariable.addInput(_SpawnObject, 0);
		_SetVariable.addInput(_Vector_001, 0);
		_SetVariable.addInput(_Vector, 0);
		_SetVariable.addOutputs([new armory.logicnode.NullNode(this)]);
	}
}
